Algorithm to perform infix to prefix
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
a. if symbol is an operand
print that symbol onto screen
b. if symbol is a left parenthesis
push it on stack
c. if symbol is right parenthesis 
pop all operators from stack upto first left () and print them on screen.
Discard the left&right ().

d. if symbol is an operator -
if the precedence of operators in stack are >= to current operator, then pop the operators out of stack onto screen & push currrent operator onto stack
else
push current operator onto stack.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Precedence order
-------------------------
parenthesis-{}, (), []
exponential notation-^
multiplication & division-*, /
add&subtraction

associativity
----------------
*,/ left to right
+ -  left to right
^ right to left

infix to prefix
------------------
infix- <operand><operator><operand> A+B
prefix- <operator><operand><operand> +AB
postfix- <operand><operand><operator> AB+


#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define SIZE 100
char stack[SIZE];
int top = -1;

void push(char ch) {
    stack[++top] = ch;
}
char pop() {
    if(top == -1) return -1;
    return stack[top--];
}
char peek() {
    if (top == -1) return -1;
    return stack[top];
}

int precedence(char ch) {
    if(ch == '^') return 3;
    if(ch == '*' || ch == '/') return 2;
    if(ch == '+' || ch == '-') return 1;
    return 0;
}

void infixToPostfix(char infix[], char postfix[]) {
    int i, j = 0;
    char c;
    for(i=0; i<strlen(infix); i++) {
        c = infix[i];
        
        if(isalnum(c)) {
            postfix[j++] = c;
        }
        else if (c == '(') {
            push (c);
        }
        else if(c == '(') {
            while (peek() != '(' && top != -1) {
                postfix[j++] = pop();
            }
            pop();
        }
        else {
            while (precedence(peek()) >= precedence(c)) {
                postfix[j++] = pop();
            }
            push(c);
        }
    }
    while(top != -1) {
        postfix[j++] = pop();
    }
    postfix[j] = '\0';
}

int main() {
    char infix[SIZE], postfix[SIZE];
    printf("Enter infix expression: ");
    scanf("%s", infix);
    
    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
    return 0;
}
